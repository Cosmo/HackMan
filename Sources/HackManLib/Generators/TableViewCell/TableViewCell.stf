//
//  {{ resource.name }}TableViewCell.swift
//

import UIKit

class {{ resource.name }}TableViewCell: UITableViewCell {
    var stackView: UIStackView = {
        let stackView = UIStackView()
        stackView.axis = NSLayoutConstraint.Axis.vertical
        return stackView
    }()
    
    {% for property in resource.properties %}
        lazy var {{ property.name }}Label: UILabel = {
            let label = UILabel()
            {% if forloop.counter == 0 %}
            label.font = UIFont.preferredFont(forTextStyle: UIFont.TextStyle.headline)
            {% elif forloop.counter == 1 %}
            label.font = UIFont.preferredFont(forTextStyle: UIFont.TextStyle.subheadline)
            {% else %}
            label.font = UIFont.preferredFont(forTextStyle: UIFont.TextStyle.body)
            {% endif %}
            label.numberOfLines = 0
            return label
            }()
    {% endfor %}
    
    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {
        super.init(style: style, reuseIdentifier: reuseIdentifier)
        commonInit()
    }
    
    required init?(coder: NSCoder) {
        super.init(coder: coder)
        commonInit()
    }
    
    func commonInit() {
        preservesSuperviewLayoutMargins = true
        contentView.preservesSuperviewLayoutMargins = true
        
        contentView.backgroundColor = UIColor.white
            
        {% for property in resource.properties %}
        stackView.addArrangedSubview({{ property.name }}Label)
        {% endfor %}
        
        contentView.addSubview(stackView)
        
        setupConstraints()
    }
    
    func setupConstraints() {
        // This fixes an iOS 12 Bug
        // https://stackoverflow.com/a/52394336/2494219
        contentView.leftAnchor.constraint(equalTo: leftAnchor).isActive = true
        contentView.rightAnchor.constraint(equalTo: rightAnchor).isActive = true
        contentView.topAnchor.constraint(equalTo: topAnchor).isActive = true
        contentView.bottomAnchor.constraint(equalTo: bottomAnchor).isActive = true
        
        stackView.translatesAutoresizingMaskIntoConstraints = false
        stackView.layoutMarginsGuide.topAnchor.constraint(equalTo: contentView.layoutMarginsGuide.topAnchor).isActive = true
        stackView.layoutMarginsGuide.leadingAnchor.constraint(equalTo: contentView.layoutMarginsGuide.leadingAnchor).isActive = true
        contentView.layoutMarginsGuide.bottomAnchor.constraint(equalTo: stackView.layoutMarginsGuide.bottomAnchor).isActive = true
        contentView.layoutMarginsGuide.trailingAnchor.constraint(equalTo: stackView.layoutMarginsGuide.trailingAnchor).isActive = true
    }
}

extension {{ resource.name }}TableViewCell: ReusableView {}
