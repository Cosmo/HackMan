//
//  {{ resource.pluralizedName }}ViewController.swift
//

import UIKit

class {{ resource.pluralizedName }}ViewController: UIViewController {
    {% if coordinator %}
    weak var coordinator: {{ resource.pluralizedName }}Coordinator?
    {% endif %}
    
    let searchResultsData = {{ resource.pluralizedName }}SearchResultsDataSource()
    let data = {{ resource.pluralizedName }}DataSource()
    
    lazy var searchController: UISearchController = {
        let searchResultsController = {{ resource.name }}SearchResultsViewController()
        self.searchResultsData.coordinator = coordinator
        searchResultsController.tableView.dataSource = self.searchResultsData
        searchResultsController.tableView.delegate = self.searchResultsData
        let searchController = UISearchController(searchResultsController: searchResultsController)
        // searchController.searchBar.scopeButtonTitles = ["All", "Option 1", "Option 2", "Other"]
        searchController.searchResultsUpdater = self
        searchController.obscuresBackgroundDuringPresentation = true
        searchController.hidesNavigationBarDuringPresentation = true
        definesPresentationContext = true
        return searchController
    }()
    
    lazy var tableView: UITableView = {
        let tableView = UITableView(frame: CGRect.zero)
        tableView.backgroundColor = UIColor.clear
        tableView.delegate = self.data
        tableView.dataSource = self.data
        tableView.register({{ resource.name }}TableViewCell.self)
        tableView.refreshControl = refreshControl
        tableView.rowHeight = UITableView.automaticDimension
        tableView.estimatedRowHeight = 44
        return tableView
    }()
    
    lazy var refreshControl: UIRefreshControl = {
        let refreshControl = UIRefreshControl()
        let refreshTitle = NSLocalizedString("Refreshing {{ resource.pluralizedName }} â€¦", comment: "{{ resource.pluralizedName }} Refresh Text")
        refreshControl.attributedTitle = NSAttributedString(string: refreshTitle)
        refreshControl.addTarget(self, action: #selector(refresh{{ resource.pluralizedName }}(sender:)), for: UIControl.Event.valueChanged)
        return refreshControl
    }()
    
    convenience init() {
        self.init(nibName: nil, bundle: nil)
    }
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        commonInit()
    }
    
    required init?(coder: NSCoder) {
        super.init(coder: coder)
        commonInit()
    }
    
    func commonInit() {
        title = NSLocalizedString("{{ resource.pluralizedName }}", comment: "{{ resource.pluralizedName }} Title (Plural)")
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        navigationController?.navigationBar.prefersLargeTitles = true
        navigationItem.searchController = searchController
        navigationItem.hidesSearchBarWhenScrolling = false
        
        {% if coordinator %}
        data.coordinator = coordinator
        {% endif %}
        
        view.backgroundColor = UIColor.white
        
        view.addSubview(tableView)
        
        setupConstraints()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        if let indexPath = tableView.indexPathForSelectedRow {
            transitionCoordinator?.animate(alongsideTransition: { context in
                self.tableView.deselectRow(at: indexPath, animated: true)
            }, completion: { context in
                if context.isCancelled {
                    self.tableView.selectRow(at: indexPath, animated: false, scrollPosition: .none)
                }
            })
        }
    }
    
    func setupConstraints() {
        tableView.translatesAutoresizingMaskIntoConstraints = false
        tableView.safeAreaLayoutGuide.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor).isActive = true
        tableView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor).isActive = true
        view.safeAreaLayoutGuide.trailingAnchor.constraint(equalTo: tableView.trailingAnchor).isActive = true
        view.safeAreaLayoutGuide.bottomAnchor.constraint(equalTo: tableView.safeAreaLayoutGuide.bottomAnchor).isActive = true
    }
}

extension {{ resource.pluralizedName }}ViewController {
    @objc func refresh{{ resource.pluralizedName }}(sender: UIRefreshControl) {
        DispatchQueue.main.asyncAfter(deadline: .now() + .seconds(3), execute: {
            sender.endRefreshing()
        })
    }
}

extension {{ resource.pluralizedName }}ViewController: UISearchResultsUpdating {
    func updateSearchResults(for searchController: UISearchController) {
        // Called when the search bar's text or scope has changed or when the search bar becomes first responder.
        searchResultsData.filterString = searchController.searchBar.text?.lowercased()
        (searchController.searchResultsController as? {{ resource.name }}SearchResultsViewController)?.tableView.reloadData()
    }
}
