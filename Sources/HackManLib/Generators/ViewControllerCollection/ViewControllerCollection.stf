//
//  {{ resource.pluralizedName }}ViewController.swift
//

import UIKit

class {{ resource.pluralizedName }}ViewController: UIViewController {
    {% if coordinator %}
    weak var coordinator: {{ resource.pluralizedName }}Coordinator?
    {% endif %}
    
    let searchResultsData = {{ resource.pluralizedName }}SearchResultsDataSource()
    
    lazy var searchController: UISearchController = {
        let searchResultsController = {{ resource.name }}SearchResultsViewController()
        self.searchResultsData.coordinator = coordinator
        searchResultsController.tableView.dataSource = self.searchResultsData
        searchResultsController.tableView.delegate = self.searchResultsData
        let searchController = UISearchController(searchResultsController: searchResultsController)
        // searchController.searchBar.scopeButtonTitles = ["All", "Option 1", "Option 2", "Other"]
        searchController.searchResultsUpdater = self
        searchController.obscuresBackgroundDuringPresentation = true
        searchController.hidesNavigationBarDuringPresentation = true
        definesPresentationContext = true
        return searchController
    }()
    
    var collectionViewLayout: UICollectionViewFlowLayout = {
        let collectionViewLayout = UICollectionViewFlowLayout()
        collectionViewLayout.minimumInteritemSpacing = 10
        collectionViewLayout.minimumLineSpacing = 10
        collectionViewLayout.itemSize = UICollectionViewFlowLayout.automaticSize
        collectionViewLayout.estimatedItemSize = CGSize(width: 180, height: 180)
        return collectionViewLayout
    }()
    
    lazy var collectionView: UICollectionView = {
        let collectionView = UICollectionView(frame: CGRect.zero, collectionViewLayout: collectionViewLayout)
        collectionView.backgroundColor = UIColor.clear
        collectionView.delegate = self
        collectionView.dataSource = self
        collectionView.register({{ resource.name }}CollectionViewCell.self)
        collectionView.preservesSuperviewLayoutMargins = true
        collectionView.alwaysBounceVertical = true
        collectionView.refreshControl = refreshControl
        return collectionView
    }()
    
    lazy var refreshControl: UIRefreshControl = {
        let refreshControl = UIRefreshControl()
        let refreshTitle = NSLocalizedString("Refreshing {{ resource.pluralizedName }} â€¦", comment: "{{ resource.pluralizedName }} Refresh Text")
        refreshControl.attributedTitle = NSAttributedString(string: refreshTitle)
        refreshControl.addTarget(self, action: #selector(refresh{{ resource.pluralizedName }}(sender:)), for: UIControl.Event.valueChanged)
        return refreshControl
    }()
    
    convenience init() {
        self.init(nibName: nil, bundle: nil)
    }
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        commonInit()
    }
    
    required init?(coder: NSCoder) {
        super.init(coder: coder)
        commonInit()
    }
    
    func commonInit() {
        title = NSLocalizedString("{{ resource.pluralizedName }}", comment: "{{ resource.pluralizedName }} Title (Plural)")
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        navigationController?.navigationBar.prefersLargeTitles = true
        navigationItem.searchController = searchController
        navigationItem.hidesSearchBarWhenScrolling = false
        
        view.backgroundColor = UIColor.white
        
        view.addSubview(collectionView)
        
        setupConstraints()
    }
    
    func setupConstraints() {
        collectionView.translatesAutoresizingMaskIntoConstraints = false
        collectionView.safeAreaLayoutGuide.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor).isActive = true
        collectionView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor).isActive = true
        view.safeAreaLayoutGuide.trailingAnchor.constraint(equalTo: collectionView.trailingAnchor).isActive = true
        view.safeAreaLayoutGuide.bottomAnchor.constraint(equalTo: collectionView.safeAreaLayoutGuide.bottomAnchor).isActive = true
    }
}

extension {{ resource.pluralizedName }}ViewController {
    var {{ resource.pluralizedNameForFunction }}: [{{ resource.name }}] {
        return {{ resource.name }}.sampleData()
    }
}

extension {{ resource.pluralizedName }}ViewController: UICollectionViewDataSource {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        // Asks your data source object for the number of items in the specified section.
        return {{ resource.pluralizedNameForFunction }}.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        // Asks your data source object for the cell that corresponds to the specified item in the collection view.
        let cell = collectionView.dequeueReusableCell(forIndexPath: indexPath) as {{ resource.name }}CollectionViewCell
        let {{ resource.nameForFunction }} = {{ resource.pluralizedNameForFunction }}[indexPath.item]
        {% for property in resource.properties %}
          cell.{{ property.name }}Label.text = String(describing: {{ resource.nameForFunction }}.{{ property.name }})
        {% endfor %}
        return cell
    }
}

extension {{ resource.pluralizedName }}ViewController: UICollectionViewDelegate {
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        // Tells the delegate that the item at the specified index path was selected.
        print("Selected item \(indexPath.item) in section \(indexPath.section)")
        {% if coordinator %}
        coordinator?.detail({{ resource.nameForFunction }}: {{ resource.pluralizedNameForFunction }}[indexPath.item])
        {% endif %}
    }
}

extension {{ resource.pluralizedName }}ViewController: UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        let distance = (collectionViewLayout as? UICollectionViewFlowLayout)?.minimumInteritemSpacing ?? 0
        let width = collectionView.frame.width - view.layoutMargins.left - view.layoutMargins.right
        return CGSize(width: (width - distance) / 3, height: 100)
    }
}

extension {{ resource.pluralizedName }}ViewController {
    @objc func refresh{{ resource.pluralizedName }}(sender: UIRefreshControl) {
        DispatchQueue.main.asyncAfter(deadline: .now() + .seconds(3), execute: {
            sender.endRefreshing()
        })
    }
}

extension {{ resource.pluralizedName }}ViewController: UISearchResultsUpdating {
    func updateSearchResults(for searchController: UISearchController) {
        // Called when the search bar's text or scope has changed or when the search bar becomes first responder.
        searchResultsData.filterString = searchController.searchBar.text?.lowercased()
        (searchController.searchResultsController as? {{ resource.name }}SearchResultsViewController)?.tableView.reloadData()
    }
}
